-- Bolum 19: Mysql Sistemi Ornegi - 110. Oluşturulacak Tabloların Çizilmesi

# MySQL Lessons
# sema olustuma ve charset atama: 
-- CREATE SCHEMA fullstack COLLATE utf8mb4_0900_ai_ci;

# veritabani olusturma
-- CREATE DATABASE fullstackdeveloper;

# veritabani silme
-- DROP DATABASE fullstackdeveloper;

/****************************************/

-- Bolum 19: Mysql Sistemi Ornegi - 111. SQL Komutları Tabloları Oluşturma ve Tablolara Veri Ekleme

use fullstack;

-- bu kodda tablo olusturuluyor
CREATE TABLE
    categories (
        id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
        name VARCHAR(50) NOT NULL,
        description VARCHAR(255),
        parent_id INT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );

-- bu kodda veri ekleniyor
INSERT INTO
    categories (name, description, parent_id)
VALUES
    ("sandalet", 'Desc 5', "3");

-- bu kodda brands tablosu olusturuluyor
CREATE TABLE
    brands (
        id int UNSIGNED PRIMARY KEY AUTO_INCREMENT,
        name VARCHAR(50) NOT NULL UNIQUE,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );

-- bu kodda coklu veri ekleniyor
INSERT INTO
    brands (name)
VALUES
    ("Adidas"),
    ("Nike"),
    ("Puma");

-- bu kodda categories tablosunda sonradan "alter" ile brand_id ekleniyor 
ALTER TABLE categories
ADD COLUMN brand_id INT AFTER description;

-- bu kodda categories tablosunda "alter" ile parent_id int UNSIGNED fieldini duzenledik 
ALTER TABLE categories MODIFY parent_id INT UNSIGNED;

-- bu kodda categories tablosunda sonradan "alter" ile FOREIGN KEY ekleniyor
ALTER TABLE categories ADD CONSTRAINT fk_parent_id FOREIGN KEY (parent_id) REFERENCES brands (id);

ALTER TABLE categories MODIFY brand_id INT UNSIGNED;

ALTER Table categories ADD CONSTRAINT fk_brand_id FOREIGN KEY (brand_id) REFERENCES brands (id);

CREATE TABLE
    products (
        id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
        name VARCHAR(100) NOT NULL,
        slug_name VARCHAR(100) NOT NULL UNIQUE,
        category_id INT UNSIGNED,
        status BOOLEAN DEFAULT false,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
    );

INSERT INTO
    products (name, slug_name, category_id, status)
VALUES
    ("Urun 1", "urun-1", 1, 0),
    ("Urun 2", "urun-2", 1, 1),
    ("Urun 3", "urun-3", 2, 1),
    ("Urun 4", "urun-4", 3, 0),
    ("Urun 5", "urun-5", 3, 1);

CREATE TABLE
    product_detail (
        id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
        product_id INT NOT NULL,
        description TEXT NOT NULL,
        short_description VARCHAR(100),
        price DECIMAL(5, 2) DEFAULT 0,
        final_price DECIMAL(5, 2) DEFAULT 0,
        stock INT DEFAULT 0,
        discount_rate DOUBLE NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE
    );

INSERT INTO
    product_detail (
        product_id,
        description,
        price,
        final_price,
        stock,
        discount_rate
    )
VALUES
    (
        1,
        "Bu bir urun 1 uzun detay",
        100.49,
        100.49,
        10,
        0
    ),
    (
        2,
        "Bu bir urun 2 uzun detay",
        360.49,
        350.49,
        200,
        10
    ),
    (
        3,
        "Bu bir urun 3 uzun detay",
        930.00,
        880.00,
        5,
        50
    ),
    (
        4,
        "Bu bir urun 4 uzun detay",
        700.00,
        620.00,
        45,
        80
    ),
    (
        5,
        "Bu bir urun 5 uzun detay",
        400.00,
        250.00,
        77,
        150
    );

CREATE TABLE
    users (
        id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(100) NOT NULL UNIQUE,
        password VARCHAR(100) NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );

INSERT INTO
    users (name, email, password)
VALUES
    ("SercanOzen", "so@gmail.com", "123456"),
    ("EmreYaman", "ey@gmail.com", "123456"),
    ("MahmutX", "mx@gmail.com", "123456");

CREATE TABLE
    discounts (
        id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
        product_id INT,
        category_id INT UNSIGNED,
        rate INT DEFAULT 0,
        cash DECIMAL(5, 2) DEFAULT 0,
        amount INT DEFAULT 0,
        status BOOLEAN DEFAULT true,
        start_date DATE,
        end_date DATE,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE,
        FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
    );

ADD COLUMN code VARCHAR(50) after id;

INSERT INTO
    discounts (code, rate, cash, amount, start_date, end_date)
VALUES
    (
        "AYAKKABI100",
        0,
        100,
        10,
        "2024-04-05",
        "2024-04-15"
    ),
    (
        "PANTOLON10",
        10,
        0,
        15,
        "2024-05-01",
        "2024-05-20"
    );

CREATE TABLE
    shopping_card (
        id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
        user_id INT NOT NULL,
        discount_id INT NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );

ALTER TABLE shopping_card MODIFY discount_id int;

CREATE TABLE
    shopping_details (
        id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
        shopping_card_id INT NOT NULL,
        product_id INT NOT NULL,
        amount INT NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (shopping_card_id) REFERENCES shopping_card (id) ON DELETE CASCADE,
        FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE
    );

INSERT INTO
    shopping_card (user_id, discount_id)
VALUES
    (1, NULL),
    (2, 2),
    (3, NULL);

INSERT INTO
    shopping_details (shopping_card_id, product_id, amount)
VALUES
    (1, 1, 1),
    (1, 3, 1),
    (1, 5, 2),
    (2, 2, 1),
    (2, 4, 1),
    (3, 1, 3);